<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hapiniu.demo.springbootdocker.dao.LxmUserInfoDAO">
  <resultMap id="BaseResultMap" type="com.hapiniu.demo.springbootdocker.entity.LxmUserInfo">
    <id column="Id" jdbcType="INTEGER" property="id" />
    <result column="UserId" jdbcType="INTEGER" property="userId" />
    <result column="UserEmail" jdbcType="VARCHAR" property="userEmail" />
    <result column="UserPhone" jdbcType="VARCHAR" property="userPhone" />
    <result column="Creater" jdbcType="VARCHAR" property="creater" />
    <result column="CreateTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="Updater" jdbcType="VARCHAR" property="updater" />
    <result column="UpdateTime" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="Status" jdbcType="BIT" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    Id, UserId, UserEmail, UserPhone, Creater, CreateTime, Updater, UpdateTime, `Status`
  </sql>
  <select id="selectByExample" parameterType="com.hapiniu.demo.springbootdocker.entity.LxmUserInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from lxm_user_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from lxm_user_info
    where Id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from lxm_user_info
    where Id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hapiniu.demo.springbootdocker.entity.LxmUserInfoExample">
    delete from lxm_user_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="Id" keyProperty="id" parameterType="com.hapiniu.demo.springbootdocker.entity.LxmUserInfo" useGeneratedKeys="true">
    insert into lxm_user_info (UserId, UserEmail, UserPhone, 
      Creater, CreateTime, Updater, 
      UpdateTime, `Status`)
    values (#{userId,jdbcType=INTEGER}, #{userEmail,jdbcType=VARCHAR}, #{userPhone,jdbcType=VARCHAR}, 
      #{creater,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updater,jdbcType=VARCHAR}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{status,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" keyColumn="Id" keyProperty="id" parameterType="com.hapiniu.demo.springbootdocker.entity.LxmUserInfo" useGeneratedKeys="true">
    insert into lxm_user_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        UserId,
      </if>
      <if test="userEmail != null">
        UserEmail,
      </if>
      <if test="userPhone != null">
        UserPhone,
      </if>
      <if test="creater != null">
        Creater,
      </if>
      <if test="createTime != null">
        CreateTime,
      </if>
      <if test="updater != null">
        Updater,
      </if>
      <if test="updateTime != null">
        UpdateTime,
      </if>
      <if test="status != null">
        `Status`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userEmail != null">
        #{userEmail,jdbcType=VARCHAR},
      </if>
      <if test="userPhone != null">
        #{userPhone,jdbcType=VARCHAR},
      </if>
      <if test="creater != null">
        #{creater,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updater != null">
        #{updater,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hapiniu.demo.springbootdocker.entity.LxmUserInfoExample" resultType="java.lang.Long">
    select count(*) from lxm_user_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update lxm_user_info
    <set>
      <if test="record.id != null">
        Id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        UserId = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.userEmail != null">
        UserEmail = #{record.userEmail,jdbcType=VARCHAR},
      </if>
      <if test="record.userPhone != null">
        UserPhone = #{record.userPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.creater != null">
        Creater = #{record.creater,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        CreateTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updater != null">
        Updater = #{record.updater,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        UpdateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null">
        `Status` = #{record.status,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update lxm_user_info
    set Id = #{record.id,jdbcType=INTEGER},
      UserId = #{record.userId,jdbcType=INTEGER},
      UserEmail = #{record.userEmail,jdbcType=VARCHAR},
      UserPhone = #{record.userPhone,jdbcType=VARCHAR},
      Creater = #{record.creater,jdbcType=VARCHAR},
      CreateTime = #{record.createTime,jdbcType=TIMESTAMP},
      Updater = #{record.updater,jdbcType=VARCHAR},
      UpdateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      `Status` = #{record.status,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hapiniu.demo.springbootdocker.entity.LxmUserInfo">
    update lxm_user_info
    <set>
      <if test="userId != null">
        UserId = #{userId,jdbcType=INTEGER},
      </if>
      <if test="userEmail != null">
        UserEmail = #{userEmail,jdbcType=VARCHAR},
      </if>
      <if test="userPhone != null">
        UserPhone = #{userPhone,jdbcType=VARCHAR},
      </if>
      <if test="creater != null">
        Creater = #{creater,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        CreateTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updater != null">
        Updater = #{updater,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        UpdateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        `Status` = #{status,jdbcType=BIT},
      </if>
    </set>
    where Id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hapiniu.demo.springbootdocker.entity.LxmUserInfo">
    update lxm_user_info
    set UserId = #{userId,jdbcType=INTEGER},
      UserEmail = #{userEmail,jdbcType=VARCHAR},
      UserPhone = #{userPhone,jdbcType=VARCHAR},
      Creater = #{creater,jdbcType=VARCHAR},
      CreateTime = #{createTime,jdbcType=TIMESTAMP},
      Updater = #{updater,jdbcType=VARCHAR},
      UpdateTime = #{updateTime,jdbcType=TIMESTAMP},
      `Status` = #{status,jdbcType=BIT}
    where Id = #{id,jdbcType=INTEGER}
  </update>
</mapper>